// crates
extern crate image;

// inclusions 
use std::io::Read;
use std::fs::File;
use std::mem;
use image::RgbImage;
use image::imageops::*;

mod vec2;
use vec2::Vec2;

mod vec3;
use vec3::Vec3;

// structs 
struct Room {
    walls: Vec<(Vec2, Vec2)>,
    ceiling: f64,
    width: f64,
    height: f64,
    t_gain: f64,
    r_gain: f64,
    t_angle: f64,
    t_pos: Vec3,
    r_pos: Vec3,
}

impl Room {
    fn new(walls: Vec<(Vec2, Vec2)>, ceiling: f64, width: f64, height: f64, t_gain: f64,
           r_gain: f64, t_angle: f64, t_pos: Vec3, r_pos: Vec3) -> Room {
        Room {
            walls: walls,
            ceiling: ceiling,
            width: width,
            height: height,
            t_gain: t_gain,
            r_gain: r_gain,
            t_angle: t_angle,
            t_pos: t_pos,
            r_pos: r_pos,
        }
    } 
    fn get_wall(wall: &(Vec2, Vec2), ceiling: f64) -> (Vec3, Vec3, Vec3, Vec3) {
        let s1 = Vec3::new(wall.0.x, wall.0.y, ceiling);
        let s2 = Vec3::new(wall.1.x, wall.1.y, ceiling);
        let s3 = Vec3::new(wall.0.x, wall.0.y, 0_f64);
        let s4 = Vec3::new(wall.1.x, wall.1.y, 0_f64);
        (s1, s2, s3, s4)
    } 
} 

fn main() {
    println!("\n
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
    //    Welcome to The Jacob Adkins Multipath Simulator!   // 
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
    ");
    
    println!("
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Stage 1: Parse Config and Room Files
    ");
    // read config file
    print!("Reading config file. . . .");
    let mut config_str = String::new();
    let mut config_f = File::open("data/config.txt").unwrap();
    config_f.read_to_string(&mut config_str).unwrap();
    println!("Okay!");

    // read room file
    print!("Reading room file. . . .");
    let mut room_str = String::new();
    let mut room_f = File::open("data/room.txt").unwrap();
    room_f.read_to_string(&mut room_str).unwrap();
    println!("Okay!");

    // declare config hashmap and vars
    let mut frequency = 0_f64;
    let mut ceiling = 0_f64;
    let mut room_w = 0_f64;
    let mut room_h = 0_f64;
    let mut t_gain = 0_f64;
    let mut r_gain = 0_f64;
    let mut t_angle = 0_f64;
    let mut t_pos = Vec3::new(0_f64, 0_f64, 0_f64);
    let mut r_pos = Vec3::new(0_f64, 0_f64, 0_f64);

    // declare walls vector
    let mut walls: Vec<(Vec2, Vec2)> = Vec::new(); 

    // parse config
    println!("\nParsing config file contents:");
    let lines = config_str.split('\n');
    for line in lines {
        let mut key_value = line.split(": ");
        match (key_value.next(), key_value.next()) {
            (Some(key), Some(val)) => {
                if val.chars().nth(0).unwrap() == '(' {
                    let chars_to_trim: &[char] = &['(', ')'];
                    let trimmed_val = val.trim_matches(chars_to_trim);
                    let mut xyz = trimmed_val.split(", ");
                    match (xyz.next(), xyz.next(), xyz.next()) {
                        (Some(x), Some(y), Some(z)) => { 
                            let x_f64 = x.parse::<f64>().unwrap();
                            let y_f64 = y.parse::<f64>().unwrap();
                            let z_f64 = z.parse::<f64>().unwrap();
                            let point = Vec3::new(x_f64, y_f64, z_f64);
                            match key {
                                "t_pos" => { t_pos = point; },
                                "r_pos" => { r_pos = point; },
                                _ => { panic!("malformed config file!"); }
                            }
                        }
                        _ => {}
                    } 
                } else {
                    let val_f64 = val.parse::<f64>().unwrap(); 
                    match key {
                        "frequency" => { frequency = val_f64; },
                        "ceiling"   => { ceiling = val_f64; },
                        "room_w"    => { room_w = val_f64; },
                        "room_h"    => { room_h = val_f64; },
                        "t_gain"    => { t_gain = val_f64; },
                        "r_gain"    => { r_gain = val_f64; },
                        "t_angle"   => { t_angle = val_f64; },
                        _ => { panic!("malformed config file!"); }
                    }
                } 
            },
            _ => {}
        }
    }
    println!(". . . .Done!");

    // parse room
    println!("\nParsing room file contents:");
    let lines = room_str.split('\n');
    for line in lines {
        let mut p1p2 = line.split("), (");
        match (p1p2.next(), p1p2.next()) {
            (Some(p1), Some(p2)) => {
                let chars_to_trim: &[char] = &['(', ')'];
                let trimmed_p1 = p1.trim_matches(chars_to_trim);
                let trimmed_p2 = p2.trim_matches(chars_to_trim);
                let mut xy1 = trimmed_p1.split(", ");
                let mut xy2 = trimmed_p2.split(", ");
                match (xy1.next(), xy1.next(), xy2.next(), xy2.next()) {
                    (Some(x1), Some(y1), Some(x2), Some(y2)) => {
                        let x1_f64 = x1.parse::<f64>().unwrap();
                        let y1_f64 = y1.parse::<f64>().unwrap();
                        let x2_f64 = x2.parse::<f64>().unwrap();
                        let y2_f64 = y2.parse::<f64>().unwrap();
                        let point1 = Vec2::new(x1_f64, y1_f64);
                        let point2 = Vec2::new(x2_f64, y2_f64); 
                        walls.push((point1, point2));
                    },
                    _ => {}
                }
            },
            _ => {}
        }
    }
    println!(". . . .Done!");

    // print out parsed values
    println!("\nParsed config values:");
    println!("Transmitter position:\t{}", t_pos);
    println!("Receiver Position:\t{}", r_pos);
    println!("Frequency:\t\t{}", frequency);
    println!("Ceiling:\t\t{}", ceiling);
    println!("Room Width:\t\t{}", room_w);
    println!("Room Height:\t\t{}", room_h);
    println!("Transmitter Gain:\t{}", t_gain);
    println!("Receiver Gain:\t\t{}", r_gain);
    println!("Transmitter Angle:\t{}", t_angle);

    // create Room object
    let mut room = Room::new(walls, ceiling, room_w, room_h, t_gain, r_gain, t_angle, t_pos, r_pos);

    // print out parsed room wall definitions
    println!("\nParsed room wall definitions:");
    for (i, wall) in room.walls.iter().enumerate() {
        println!("Wall #{}: {} - {}", i, wall.0, wall.1);
    }

    println!("
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Stage 2: Contruct Virtual Indoor Space
    ");
    
    let mut image = RgbImage::new(room.width as u32, room.height as u32); 
    
    for wall in room.walls.iter() {
        image.get_pixel_mut(wall.0.x as u32, wall.0.y as u32).data = [255, 255, 255];
        let mut x1 = wall.0.x as u32;
        let mut y1 = wall.0.y as u32;
        let x2 = wall.1.x as u32;
        let y2 = wall.1.y as u32;
        image.get_pixel_mut(x1, y1).data = [255, 255, 255];
        loop { 
            if x1 > x2 { x1 -= 1; }
            if x1 < x2 { x1 += 1; }
            if y1 > y2 { y1 -= 1; }
            if y1 < y2 { y1 += 1; }
            image.get_pixel_mut(x1, y1).data = [255, 255, 255];
            if x1 == x2 && y1 == y2 { break; }
        } 
    }

    // generate the rays
    
    let mut src = room.t_pos;
    let mut dst = room.r_pos; 
    
    for _i in 1..50 { 
        let steep = (dst.y - src.y).abs() > (dst.x - src.x).abs();
        if steep {
            mem::swap(&mut src.x, &mut src.y);
            mem::swap(&mut dst.x, &mut dst.y);
        }
        if src.x > dst.x {
            mem::swap(&mut src.x, &mut dst.x);
            mem::swap(&mut src.y, &mut dst.y);
        }
        let dx = dst.x - src.x;
        let dy = (dst.y - src.y).abs();
        let mut err = dx / 2.0;
        let mut ystep = 0;
        if src.y < dst.y {
            ystep = 1;
        } else {
            ystep = -1;
        }
        let mut y = src.y as i32;
        let maxx = dst.x as i32;
        let mut x = src.x as i32;
        while x < maxx {
            let color = [((255 / maxx)*x) as u8, 0, 0];
            match steep {
                true => { image.get_pixel_mut(y as u32, x as u32).data = color; },
                false => { image.get_pixel_mut(x as u32, y as u32).data = color; },
            }
            err -= dy;
            if err < 0.0 {
                y += ystep;
                err += dx;
            }
            x += 1;
        }
        dst.pos(1.0, 1.0, 0.0);
    }
    
    image.get_pixel_mut(src.x as u32, src.y as u32).data = [0, 255, 0];
    image.get_pixel_mut(dst.x as u32, dst.y as u32).data = [0, 0, 255];

    image = flip_vertical(&image);
    image.save("image.png").unwrap();

    // follow the rays, determining the 3 best
    
    // calculate the strength of the 3 best rays
     
}
